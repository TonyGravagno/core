!function(){const Bukkit=Java.type("org.bukkit.Bukkit"),Command=Java.extend(Java.type("org.bukkit.command.Command")),FileInputStream=Java.type("java.io.FileInputStream"),FileOutputStream=Java.type("java.io.FileOutputStream"),Files=Java.type("java.nio.file.Files"),Listener=Java.extend(Java.type("org.bukkit.event.Listener"),{}),Paths=Java.type("java.nio.file.Paths"),Scanner=Java.type("java.util.Scanner"),Source=Java.type("org.graalvm.polyglot.Source"),StandardCopyOption=Java.type("java.nio.file.StandardCopyOption"),URL=Java.type("java.net.URL"),ZipInputStream=Java.type("java.util.zip.ZipInputStream");let version="modern",ChatMessageType,EventPriority,EventType,TextComponent;try{ChatMessageType=Java.type("net.md_5.bungee.api.ChatMessageType"),TextComponent=Java.type("net.md_5.bungee.api.chat.TextComponent")}catch(error){version="legacy"}try{EventPriority=Java.type("org.bukkit.event.EventPriority")}catch(error){EventType=Java.type("org.bukkit.event.Event$Type"),EventPriority=Java.type("org.bukkit.event.Event$Priority"),version="ancient"}const global=globalThis,server=Bukkit.getServer(),manager=server.getPluginManager(),plugin=manager.getPlugin("grakkit"),context=plugin.getClass().static.context,commandMap=server.getClass().getDeclaredField("commandMap");commandMap.setAccessible(!0);const registry=commandMap.get(server),circular=function(){};let trusted=[];const core={chain:(base,modifier)=>{const chain=object=>modifier(object,chain);chain(base)},command:options=>{if(core.session.command[options.name]={execute:options.execute,tabComplete:options.tabComplete},!registry.getCommand(options.name)){const command=new Command(options.name,{execute:(player,name,args)=>{if(options.permission&&!player.hasPermission(options.permission))return options.error&&player.sendMessage(options.error),!1;try{return(core.session.command[options.name].execute||(()=>{}))(player,...args),!0}catch(error){return console.error(`An error occured while attempting to execute the "${name}" command!`),console.error(error.stack||error.message||error),!1}},tabComplete:(player,name,args)=>{try{const results=(core.session.command[options.name].tabComplete||(()=>{}))(player,...args);return results?"string"==typeof results?[results]:"function"==typeof results[Symbol.iterator]?[...results]:[]:[]}catch(error){return console.error(`An error occured while attempting to tab-complete the "${name}" command!`),console.error(error.stack||error.message||error),[]}}});options.error&&command.setPermissionMessage(options.error),options.aliases&&command.setAliases([...options.aliases]),options.permission&&command.setPermission(options.permission),registry.register(options.fallback||"grakkit",command)}},get context(){return context},data:(...path)=>{const name=Paths.get(...path).normalize().toString(),store=core.session.data;return store[name]||(store[name]=core.root.file("data",`${path}.json`).json()||{}),store[name]},error:error=>{let type="Error",message=`${error}`;if(error.stack)switch(type=error.stack.split("\n")[0].split(" ")[0].slice(0,-1),message=error.message,type){case"TypeError":try{if(message.startsWith("invokeMember")||message.startsWith("execute on foreign object")){const reason=message.split("failed due to: ")[1];if(reason.startsWith("no applicable overload found")){const sets=reason.split("overloads:")[1].split("]],")[0].split(")]").map(set=>`(${set.split("(").slice(1).join("(")})`);message=["Invalid arguments! Expected:§4",...sets].join("\n -> ").slice(0,-1)}else message=reason.startsWith("Arity error")?`Insufficient arguments! Expected: ${reason.split("-")[1].split(" ")[2]}`:reason.startsWith("UnsupportedTypeException")?"Invalid arguments!":reason.startsWith("Unknown identifier")?`That method (${reason.split(": ")[1]}) is not a member of its parent!`:reason.startsWith("Message not supported")?`That method (${message.slice(14).split(")")[0]}) is not a member of its parent!`:message.split("\n")[0]}}catch(error){message=message.split("\n")[0]}break;case"SyntaxError":message=message.split(" ").slice(1).join(" ").split("\n")[0]}else type=(error=`${error}`).split(" ")[0].slice(0,-1),message=error.split(" ").slice(1).join(" ");return`${type}: ${message}`},eval:code=>Polyglot.eval("js",code),event:(name,...listeners)=>{const store=core.session.event[name]||(core.session.event[name]=[]);listeners.forEach(listener=>{1===store.push(listener)&&("ancient"===version?manager.registerEvent(EventType[name],new Listener,(info,event)=>store.forEach(listener=>listener(event)),EventPriority.Highest,plugin):manager.registerEvent(Java.type(name).class,new Listener,EventPriority.HIGHEST,(info,event)=>store.forEach(listener=>listener(event)),plugin))})},export:object=>{(core.session.export.slice(-1)[0]||(()=>{}))(object)},fetch:from=>{const link=new URL(from).openConnection();link.setDoOutput(!0),link.setRequestMethod("GET"),link.setInstanceFollowRedirects(!0);const code=link.getResponseCode();if(200===code)return{json:()=>{try{return JSON.parse(new Scanner(link.getInputStream()).useDelimiter("\\A").next())}catch(error){return null}},read:()=>new Scanner(link.getInputStream()).useDelimiter("\\A").next(),stream:()=>link.getInputStream(),unzip:to=>core.unzip(link.getInputStream(),to)};throw code},file:(...path)=>{const io=Paths.get(...path).normalize().toFile(),thing={add:()=>(thing.file("..").dir(),io.createNewFile(),thing),child:index=>io.listFiles()[index]?core.file(io.listFiles()[index].getPath()):null,dir:()=>(core.chain(io,(io,loop)=>{const up=io.getParentFile();up&&!up.exists()&&loop(up),io.mkdir()}),thing),get exists(){return io.exists()},file:(...sub)=>core.file(...path,...sub),flush:()=>(core.chain(io,(io,loop)=>{const up=io.getParentFile();up&&up.listFiles()&&!up.listFiles()[0]&&up.delete()&&loop(up)}),thing),get io(){return io},json:()=>{try{return JSON.parse(thing.read())}catch(error){return null}},parse:()=>(io.exists()&&context.eval(Source.newBuilder("js",io).mimeType("application/javascript+module").cached(!1).build()),thing),get path(){return io.getPath().replace(/(\\)/g,"/")},read:()=>io.exists()&&!io.isDirectory()?Files.readString(io.toPath()):null,remove:()=>(core.chain(io,(io,loop)=>{io.isDirectory()&&[...io.listFiles()].forEach(loop),io.exists()&&io.delete()}),thing.flush()),stream:()=>new FileOutputStream(io),transfer:(to,action)=>(core.chain([io,to],(io,loop)=>{io[0].isDirectory()?(core.file(io[1].getPath()).dir(),[...io[0].listFiles()].forEach(from=>{loop([from,core.file(io[1].getPath(),from.getName()).io])})):io[0].exists()&&!io[1].exists()&&Files[action](io[0].toPath(),io[1].toPath(),StandardCopyOption.REPLACE_EXISTING)}),thing.flush()),write:content=>(io.exists()&&!io.isDirectory()&&Files.writeString(io.toPath(),content),thing),unzip:to=>core.unzip(new FileInputStream(io),to)};return thing},import:source=>{if("string"!=typeof source)throw'TypeError: Argument 1 must be of type "string"';if("@"===source[0])return core.module.import(source.slice(1));{const origin=core.module.state||core.root,importer=core.root.file("import.js");let result=null;core.session.export.push(output=>result=output),importer.write(`import * as output from '../../${origin.path}'; core.export(output);`);const state=core.module.state;core.module.state=origin;try{return importer.parse(),core.module.state=state,core.session.export.pop(),result}catch(error){throw console.error(`An error occured while attempting to evaluate the "${origin.path}" file!`),core.module.state=state,core.session.export.pop(),error}}},get manager(){return manager},module:{action:(player,option,key)=>{key=key.toLowerCase();const action={add:"Install",remove:"Delet",update:"Updat"}[option];try{core.send(player,`§7${action}ing... (${key})`),core.module[option](key),core.send(player,`§7Module ${action}ed. (${key})`)}catch(error){switch(error){case"module-already-installed":core.send(player,"§cThat module has already been installed!");break;case"module-already-updated":core.send(player,"§cThat module is already up to date!");break;case"module-download-failed":core.send(player,"§cAn error occured while downloading that module!");break;case"module-not-available":core.send(player,"§cThat module has no releases available!");break;case"module-not-installed":core.send(player,"§cThat module has not already been installed!");break;default:core.send(player,"§cAn unexpected error occured!"),console.error(error.stack||error)}}},add:key=>{if(core.module.list[key])throw"module-already-installed";core.module.list[key]=core.module.download(key)},delete:key=>{core.root.file("modules",key).remove()},download:key=>{const latest=core.module.latest(key);if(!latest)throw"module-not-available";if(core.module.list[key]===latest.name)throw"module-already-updated";try{const from=core.fetch(latest.zipball_url).unzip(core.root.file("downloads",key).io);return core.module.delete(key),from.child(0).transfer(core.root.file("modules",key).io,"move").remove(),latest.name}catch(error){throw core.root.file("downloads",key).remove(),console.error(`An error occured while attempting to download the "${key}" repository!`),console.error(error.stack||error),"module-download-failed"}},import:key=>{if(core.session.module[key])return core.session.module[key];{const folder=core.root.file("modules",key);let info,output;try{info=folder.file("package.json").json()||{}}catch(error){info={}}core.session.export.push(value=>output=value);const main=folder.file(info.main||"index.js"),state=core.module.state;core.module.state=main;try{return main.parse(),core.module.state=state,core.session.export.pop(),output}catch(error){throw console.error(`An error occured while attempting to evaluate the "${key}" module!`),core.module.state=state,core.session.export.pop(),error}}},latest:key=>core.fetch(`https://api.github.com/repos/${key}/tags`).json()[0],get list(){return core.data("../modules")},remove:key=>{if(!core.module.list[key])throw"module-not-installed";core.module.delete(key),delete core.module.list[key]},state:null,update:key=>{if(!core.module.list[key])throw"module-not-installed";core.module.list[key]=core.module.download(key)}},output:(object,nested)=>{if(nested){if(object&&object.constructor===circular)return"Circular";{const type=toString.apply(object);switch(type){case"[object Object]":case"[object Function]":case"[foreign HostFunction]":return type.split(" ")[1].slice(0,-1);case"[object Array]":return`[ ${core.serialize(object).map(core.output,!0).join(", ")} ]`;case"[foreign HostObject]":const output=`${object}`;return!output||output.startsWith("class ")?object.getCanonicalName?object.getCanonicalName():object.class?object.class.getCanonicalName():object:output;default:switch(typeof object){case"function":return"Function";case"string":return`"${object}"`;case"symbol":return`@@${`${object}`.slice(7,-1)}`;default:return`${object}`}}}}else{if(![null,void 0].includes(object)&&"string"==typeof object[""])return object[""];switch(toString.apply(object)){case"[object Object]":const names=Object.getOwnPropertyNames(object);return`{ ${names.map(name=>`${name}: ${core.output(object[name],!0)}`).join(", ")} }`;case"[object Function]":return`${object}`.replace(/\r/g,"");case"[foreign HostFunction]":let input=args.slice(-1)[0].split(".").slice(-1)[0];return input.endsWith("]")&&(input=eval(input.replace(/.*\[/,"").slice(0,-1))),`hostFunction ${input.split(/[|;]/g)[0]}() { [native code] }`;default:return core.output(object,!0)}}},get plugin(){return plugin},get registry(){return registry},get root(){return core.file(core.plugin.getDataFolder().getPath().replace(/[\\]/g,"/"))},serialize:(object,nullify,nodes)=>{if(null===object||"object"!==object)return object;{nodes||(nodes=[object]);let output="function"==typeof object[Symbol.iterator]?[]:{};return Object.keys(object).map(key=>{const value=object[key];nodes.includes(value)?output[key]=nullify?null:new circular:output[key]=core.serialize(value,nullify,[...nodes,object])}),output}},session:{command:{},data:{},event:{},export:[],get module(){return core.data("modules")}},send:(player,message,action)=>{const limit=action?128:2048;message.length>limit&&(message=`${message.slice(0,limit-3)}...`),action?"modern"===version&&player.sendMessage(ChatMessageType.ACTION_BAR,new TextComponent(message)):player.sendMessage(message)},type:name=>Java.type(name),unzip:(from,to)=>{const stream=new ZipInputStream(from);try{let entry;for(;entry=stream.getNextEntry();){const file=core.file(to.getPath(),entry.getName());if(entry.isDirectory())file.dir();else{const output=file.add().stream();try{stream.transferTo(output),output.close()}catch(error){throw output.close(),error}}stream.closeEntry()}return stream.close(),from.close(),core.file(to.getPath())}catch(error){throw stream.close(),from.close(),error}},get version(){return version}};Object.assign(global,{core:core,global:global,server:server}),core.command({name:"js",permission:"grakkit.command.js",error:"§cYou lack the permission §4(grakkit.command.js) §cto use that command!",execute:(player,...args)=>{const self=global.hasOwnProperty("self");try{self||(global.self=player);const result=core.eval(args.join(" "));self||delete global.self,core.send(player,`§7${core.output(result)}`)}catch(error){self||delete global.self,core.send(player,`§c${core.error(error)}`)}},tabComplete:(player,...args)=>{const input=args.slice(-1)[0],single=/(\!|\^|\&|\*|\(|\-|\+|\=|\{|\||\;|\:|\,|\?|\/)/,filter=/.*(\!|\^|\)|\&|\*|\(|\-|\+|\=|\{|\||\;|\:|\,|\?|\/)/;let index=0,string=null,nodes=input;for(;index<input.length;){const char=input[index];char===string?string=null:["'",'"',"`"].includes(char)?string=char:!string&&single.test(char)&&(nodes=input.slice(index+1)),++index}index=0,nodes=nodes.replace(/(\[)|(\]\.)/g,".").split(".");let context=global;for(;index<nodes.length-1;){let node=nodes[index++];["'",'"',"`"].includes(node[0])&&(node=node.slice(1,-1)),node.length&&node[0].match(/[0-9]/g)&&(node=Number(node)),context[node]?context=context[node]:context===global&&"self"===node?context=player:index=1/0}if(index===nodes.length-1){const base=(input.match(filter)||[""])[0]+input.replace(filter,"");let segment=nodes.slice(-1)[0];["'",'"',"`"].includes(segment[0])&&(segment=segment.slice(1,-1));const properties=Object.getOwnPropertyNames(context);return context!==global||properties.includes("self")||properties.push("self"),"number"==typeof context.length&&["object","function"].includes(typeof context[0])&&properties.push(...Array(context.length).join(" ").split(" ").map((value,index)=>`${index}`)),properties.filter(key=>key.toLowerCase().includes(segment.toLowerCase())).map(key=>{let property="";if(key.length&&key[0].match(/[0-9]/g))property=`[${key}]`;else{if(key.match(/[^0-9A-Za-z|\_|\$]/g))return null;property=`.${key}`}const path=base.split(property[0]),name=property.slice(1);return base&&base.match(/[\.\[]/g)?context===global?base+name:name.includes(path.slice(-1)[0])?path.slice(0,-1).join(property[0])+property:void 0:base.split(single).slice(0,-1).join("")+name}).filter(property=>property)}}}),core.command({name:"module",permission:"grakkit.command.module",error:"§cYou lack the permission §4(grakkit.command.module) §cto use that command!",execute:(player,option,key)=>{option?"list"===(option=option.toLowerCase())?core.send(player,`§7Installed modules: ${core.output(Object.keys(core.module.list))}`):["add","remove","update"].includes(option)?"*"===key?"add"===option?core.send(player,"§7One sec, just need to download the entire GitHub database..."):Object.keys(core.module.list).map(key=>core.module.action(player,option,key)):key?core.module.action(player,option,key.toLowerCase()):core.send(player,"§cYou must specify a repository!"):core.send(player,"§cThat option is invalid!"):core.send(player,"§cYou must specify an option!")},tabComplete:(player,...args)=>{switch(args.length){case 1:return["add","list","remove","update"].filter(value=>value.includes(args[0]));case 2:switch(args[0]){case"add":return trusted.filter(value=>value.includes(args[1]));case"remove":case"update":return["*",...Object.keys(core.module.list).filter(value=>value.includes(args[1]))]}}}}),core.command({name:"grakkit",permission:"grakkit.command.grakkit",error:"§cYou lack the permission §4(grakkit.command.grakkit) §cto use that command!",execute:(player,action)=>{if(action)switch(action){case"refresh":core.send(player,"§7Refreshing..."),manager.disablePlugin(plugin),manager.enablePlugin(plugin),core.send(player,"§7Refresh Complete.");break;case"update":core.send(player,"§7Updating..."),core.root.file("index.js").remove(),server.reload(),core.send(player,"§7Update Complete.");break;default:core.send(player,"§cThat action is invalid!")}else core.send(player,"§cYou must specify an action!")},tabComplete:(player,...args)=>{if(1===args.length)return["refresh","update"].filter(value=>value.includes(args[0]))}}),core.event("modern"===version?"org.bukkit.event.server.PluginDisableEvent":"PLUGIN_DISABLE",event=>{plugin===event.getPlugin()&&Object.keys(core.session.data).forEach(path=>{const data=JSON.stringify(core.serialize(core.session.data[path],!0));core.root.file("data",`${path}.json`).add().write(data)})});const master="https://raw.githubusercontent.com/grakkit/core/master";try{trusted=core.fetch(`${master}/modules.json`).json()}catch(error){console.log("Downloading official module list..."),console.error("An error occured while attempting to download the official module list!"),trusted=[]}try{core.root.file("dict").exists||["classes","core","events","types"].map(name=>`${name}.d.ts`).forEach(name=>{const target=core.root.file("dict",name);console.log(`Downloading typescript definition file... ${target.path}`),target.add().write(core.fetch(`${master}/dict/${name}`).read())})}catch(error){console.error("An error occured while attempting to download a typescript definiton file!")}const user=core.root.file("user.js");user.exists||user.add().write(["/** @type {import('./dict/core').core} */ const core = global.core;","/** @type {import('./dict/classes').Server} */ const server = global.server;",""].join("\n")),[user.io,...core.root.file("scripts").dir().io.listFiles()||[]].forEach(io=>{const script=core.file(io.getPath());try{console.log(`Evaluating... ${script.path}`),script.parse()}catch(error){console.error(`An error occured while attempting to evaluate the "${script.path}" file!`)}})}();