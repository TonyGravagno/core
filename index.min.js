const µ=(µ,self)=>eval(µ);!function(){const global=globalThis,server=Java.type("org.bukkit.Bukkit").getServer(),core={circular:function(){},clear:io=>{io.isDirectory()&&[...io.listFiles()].forEach(core.clear),io.delete()},command:options=>{const name=options.name,input=Object.assign({prefix:"grakkit",usage:`/${name} <...args>`,description:"{ description }",execute:()=>{},tabComplete:()=>[]},options),namekey=`${input.prefix}:${name}`;core.session.commands[namekey]={execute:input.execute,tabComplete:input.tabComplete};const prefix=`(player,args)=>core.session.commands[${JSON.stringify(namekey)}]`,suffix="(player,...args.split(' '))";core.plugin.register(input.prefix,input.name,input.usage,input.description,`${prefix}.execute${suffix}`,`${prefix}.tabComplete${suffix}`)},data:(path,standby)=>{const store=core.session.data,file=core.file(core.root,`data/${path}.json`);return store[path]||(store[path]=Object.assign(standby||{},JSON.parse(file.read()||"{}")))},error:error=>{let type="Error",message=`${error}`;if(error.stack)switch(message=error.message,type=error.stack.split("\n")[0].split(" ")[0].slice(0,-1),type){case"TypeError":if(message=message.split("\n")[0],message.startsWith("invokeMember")||message.startsWith("execute on foreign object")){const reason=message.split("failed due to: ")[1];if(reason.startsWith("no applicable overload found")){const sets=reason.split("overloads:")[1].split("]],")[0].split(")]").map(set=>`(${set.split("(").slice(1).join("(")})`);message=`Invalid arguments! Expected: ${sets.join(" || ").slice(0,-1)}`}else reason.startsWith("Arity error")?message=`Insufficient arguments! Expected: ${reason.split("-")[1].split(" ")[2]}`:reason.startsWith("UnsupportedTypeException")?message="Invalid arguments!":reason.startsWith("Unknown identifier")&&(message=`That method (${reason.split(": ")[1]}) is not a member of its parent!`)}break;case"SyntaxError":message=message.split(" ").slice(1).join(" ").split("\n")[0]}else type=error.split(" ")[0].slice(0,-1),message=error.split(" ").slice(1).join(" ");return`${type}: ${message}`},eval:(player,...args)=>{try{let output=void 0;const result=µ(args.join(" "),player);switch(toString.apply(result)){case"[object Object]":const names=Object.getOwnPropertyNames(result);output=`{ ${names.map(name=>`${name}: ${core.output(result[name])}`).join(", ")} }`;break;case"[object Function]":output=result.hostFunction?`hostFunction ${result.hostFunction}() { [native code] }`:`${result}`.replace(/\r/g,"");break;case"[foreign HostFunction]":let input=args.slice(-1)[0].split(".").slice(-1)[0];input.endsWith("]")&&(input=eval(input.replace(/.*\[/,"").slice(0,-1))),output=`hostFunction ${input.split(/[|;]/g)[0]}() { [native code] }`;break;default:output=core.output(result)}return output}catch(error){throw core.error(error)}},event:(name,listener)=>{const store=core.session.events[name]||(core.session.events[name]=[]);if(1===store.push(listener)){const manager=server.getPluginManager();manager.registerEvent(Java.type(name).class,new(Java.extend(Java.type("org.bukkit.event.Listener"),{})),Java.type("org.bukkit.event.EventPriority").HIGHEST,(info,event)=>store.forEach(listener=>listener(event)),core.plugin)}},file:(...nodes)=>{const io=java.nio.file.Path.of(...nodes).toFile();let parent=io=>{let context=io.getParentFile();if(!context.exists()){const contexts=[];for(;context&&!context.exists();)contexts.push(context),context=context.getParentFile();contexts.reverse().forEach(folder=>folder.mkdir())}};return{add:()=>(parent(io),io.exists()||java.nio.file.Files.createFile(io.toPath()),io),dir:()=>(parent(io),io.exists()||io.mkdir(),io),get exists(){return io.exists()},get extension(){return io.getPath().replace(/[\\]/g,"/").split("/").slice(-1)[0].split(".")[1]||null},get io(){return io},get parent(){return core.file(io.getParentFile().getPath())},get path(){return io.getPath().replace(/[\\]/g,"/")},read:()=>{try{const output=[],reader=new java.io.BufferedReader(new java.io.FileReader(io));return reader.lines().forEach(line=>output.push(line)),reader.close(),output.join("\n")}catch(error){return null}},remove:()=>{io.exists()&&core.clear(io);let context=io.getParentFile();if(context&&context.exists())for(;context&&!context.listFiles()[0];)context.delete(),context=context.getParentFile();return io},write:data=>{try{const writer=new java.io.PrintWriter(new java.io.FileWriter(io));return writer.print(data),writer.close(),!0}catch(error){return!1}}}},fetch:(location,callback)=>{const conn=new java.net.URL(location).openConnection();conn.setDoOutput(!0),conn.setRequestMethod("GET"),conn.setInstanceFollowRedirects(!0),200===conn.getResponseCode()?callback({stream:()=>conn.getInputStream(),text:()=>new java.util.Scanner(conn.getInputStream()).useDelimiter("\\A").next(),json:()=>{try{return JSON.parse(new java.util.Scanner(conn.getInputStream()).useDelimiter("\\A").next())}catch(error){return null}}}):callback(null,conn.getResponseCode())},from:(query,array)=>[...array].sort().filter(value=>value.includes(query)),import:source=>{if(core.session.cache[source])return core.session.cache[source];{const file=core.file(core.root,`modules/${source}/package.json`);if(!file.exists)throw`ImportError: "${file.path}" does not exist!`;{let info=void 0;try{info=JSON.parse(file.read())}catch(error){throw`ImportError: "${file.path}" is not a valid JSON file!`}if((info.require||[]).forEach(require=>{if(!core.modules[require])throw`ImportError: The required dependency "${require}" must be installed!`}),!info.main)throw`ImportError: "${file.path}" is not a valid package file!`;{info.main.endsWith(".js")||(info.main+=".js");const index=core.file(`${file.parent.path}/${info.main}`);if(!index.exists)throw`ImportError: "${index.path}" does not exist!`;try{return core.session.cache[source]=core.parse(index.io)}catch(error){throw console.error(error.stack||error),`ImportError: "${index.path}" threw an error during evaluation!`}}}}},install:(source,callback)=>{core.fetch(`https://api.github.com/repos/${source}/releases`,(response,error)=>{let json=response.json();response&&json?json.message?(console.error(`API - ${json.message}`),callback(null,"An API error occured!")):("unsafe"===core.options.channel||(json=json.filter(re=>!1===re.draft)),"main"===core.options.channel&&(json=json.filter(re=>!1===re.prerelease)),json[0]?core.modules[source]===json[0].id?callback(null,"That module is already up to date!"):core.fetch(json[0].zipball_url,response=>{try{const stream=new java.util.zip.ZipInputStream(response.stream()),downloads=core.file(core.root,"downloads");let entry=void 0,output=void 0;for(downloads.dir();entry=stream.getNextEntry();){const file=core.file(downloads.path,entry.getName());if(entry.isDirectory())file.dir(),output||(output=file);else{const target=new java.io.FileOutputStream(file.add());stream.transferTo(target),target.close()}stream.closeEntry()}stream.close();const destination=core.file(core.root,"modules",source).dir();[...destination.listFiles()].forEach(core.clear),java.nio.file.Files.move(output.io.toPath(),destination.toPath(),java.nio.file.StandardCopyOption.REPLACE_EXISTING),output.remove(),core.modules[source]=json[0].id,callback(!0)}catch(error){console.error(`File - ${error}`),callback(null,"A file error occured!")}}):callback(null,"Your current release channel has no available downloads!")):(console.error(`HTTP - ${error}`),callback(null,"An HTTP error occured!"))})},get modules(){return core.data("grakkit/modules")},get options(){return core.data("grakkit/options",{channel:"main",mode:"manual"})},output:object=>{if(object&&object.constructor===core.circular)return"Circular";{const type=toString.apply(object);switch(type){case"[object Object]":case"[object Function]":case"[foreign HostFunction]":return type.split(" ")[1].slice(0,-1);case"[object Array]":return`[ ${core.serialize(object).map(core.output).join(", ")} ]`;case"[foreign HostObject]":const output=`${object}`;return!output||output.startsWith("class ")?object.getCanonicalName?object.getCanonicalName():object.class?object.class.getCanonicalName():object:output;default:switch(typeof object){case"function":return"Function";case"string":return`"${object}"`;case"symbol":return`@@${`${object}`.slice(7,-1)}`;default:return`${object}`}}}},parse:io=>{let output=void 0;const source=Java.type("org.graalvm.polyglot.Source"),builder=source.newBuilder("js",io).mimeType("application/javascript+module");try{const core=Object.assign(core,{export:value=>output=value});return core.plugin.context().eval(builder.build()),output}catch(error){throw core.error(error)}},get plugin(){return server.getPluginManager().getPlugin("grakkit")},get root(){return core.plugin.getDataFolder().getPath().replace(/[\\]/g,"/")},serialize:(object,nullify,nodes)=>{if("object"==typeof object){if(null===object)return null;{nodes||(nodes=[object]);let output="function"==typeof object[Symbol.iterator]?[]:{};return Object.keys(object).map(key=>{const value=object[key];nodes.includes(value)?output[key]=nullify?null:new core.circular:output[key]=core.serialize(value,nullify,[...nodes,object])}),output}}return object},session:{cache:{},commands:{},data:{},events:{},modules:[]}};Object.assign(global,{core:core,global:global,server:server}),core.command({name:"js",execute:(player,...args)=>{try{player.sendMessage(`§7${core.eval(player,...args)}`)}catch(error){player.sendMessage(`§c${error}`)}},tabComplete:(player,...args)=>{if("enabled"===core.options.eval){const action=Java.type("net.md_5.bungee.api.ChatMessageType").ACTION_BAR,component=Java.type("net.md_5.bungee.api.chat.TextComponent");try{player.sendMessage(action,new component(`§f${core.eval(player,...args)}`))}catch(error){player.sendMessage(action,new component(`§4${error}`))}}const input=args.slice(-1)[0],filter=/.*(\!|\^|\&|\*|\(|\-|\+|\=|\[|\{|\||\;|\:|\,|\?|\/)/,nodes=input.replace(filter,"").split(".");let context=Object.assign(global,{self:global.self||player}),index=0;for(;index<nodes.length-1;){let node=nodes[index];context[node]?(context=context[node],++index):index=1/0}if(index===nodes.length-1){const segment=nodes.slice(-1)[0];return Object.getOwnPropertyNames(context).filter(key=>key.toLowerCase().includes(segment.toLowerCase())).map(comp=>(input.match(filter)||[""])[0]+[...nodes.slice(0,-1),comp].join("."))}return[]}}),core.command({name:"module",execute:(player,option,value)=>{if(option&&(option=option.toLowerCase()),value&&(value=value.toLowerCase()),option){const keys=Object.keys(core.modules);switch(option){case"add":case"remove":case"update":if("*"===value)if("add"===option)player.sendMessage("§7One sec, just need to download the entire GitHub database...");else if(keys[0])switch(option){case"remove":player.sendMessage("§7Deleting..."),keys.forEach(value=>{delete core.modules[value],core.file(core.root,`modules/${value}`).remove(),player.sendMessage(`§7Module deleted. (${value})`)}),player.sendMessage("§7Modules deleted.");break;case"update":player.sendMessage("§7Updating...");let update=index=>{const value=keys[index];core.install(value,(data,reason)=>{data?player.sendMessage(`§7Module updated. (${value})`):player.sendMessage(`§c${reason} §7(${value})`),++index<keys.length?update(index):player.sendMessage("§7Modules updated.")})};update(0)}else player.sendMessage(`§cThere are no modules to ${option}!`);else if(value)if(value.split("/")[1]&&2===value.split("/").length)switch(option){case"add":core.modules[value]?player.sendMessage("§cThat module is already installed!"):(player.sendMessage("§7Installing..."),core.install(value,(data,reason)=>{data?player.sendMessage("§7Module installed."):player.sendMessage(`§c${reason}`)}));break;case"remove":core.modules[value]?(player.sendMessage("§7Deleting..."),delete core.modules[value],core.file(core.root,`modules/${value}`).remove(),player.sendMessage("§7Module deleted.")):player.sendMessage("§cThat module has not been installed!");break;case"update":core.modules[value]?(player.sendMessage("§7Updating..."),core.install(value,(data,reason)=>{data?player.sendMessage("§7Module updated."):player.sendMessage(`§c${reason}`)})):player.sendMessage("§cThat module has not been installed!")}else player.sendMessage("§cThat repository is invalid!");else player.sendMessage("§cYou must specify a repository!");break;case"channel":value?["main","dev","all"].includes(value)?(core.options.channel=value,player.sendMessage("§7Release channel updated.")):player.sendMessage("§cThat is not a valid release channel!"):player.sendMessage("§cYou must specify a release channel!");break;case"list":player.sendMessage(`§7Installed modules: ${core.output(keys)}`);break;default:player.sendMessage("§cThat option does not exist!")}}else player.sendMessage("§cYou must specify an option!")},tabComplete:(player,option,value,appendix)=>{if(option&&(option=option.toLowerCase()),value&&(value=value.toLowerCase()),void 0!==appendix)return[];if(void 0===value)return void 0!==option?core.from(option,["add","channel","list","remove","update"]):[];switch(option){case"add":return core.from(value,core.session.modules);case"channel":return core.from(value,["main","dev","unsafe"]);case"remove":case"update":return core.from(value,["*",...Object.keys(core.modules)]);default:return[]}}}),core.command({name:"grakkit",execute:(player,option,value)=>{if(option&&(option=option.toLowerCase()),value&&(value=value.toLowerCase()),option)switch(option){case"mode":value?["manual","automatic"].includes(value)?(core.options.mode=value,player.sendMessage("§7Update mode updated.")):player.sendMessage("§cThat is not a valid update mode!"):player.sendMessage("§cYou must specify an update mode!");break;case"eval":value?["enabled","disabled"].includes(value)?(core.options.eval=value,player.sendMessage(`§7Live evaluation ${value}.`)):player.sendMessage("§cThat is not a valid state!"):player.sendMessage("§cYou must specify a state!");break;case"update":core.file(core.root,"index.js").remove(),server.reload(),player.sendMessage("§7Update complete.");break;default:player.sendMessage("§cThat option does not exist!")}else player.sendMessage("§cYou must specify an option!")},tabComplete:(player,option,value,appendix)=>{if(option&&(option=option.toLowerCase()),value&&(value=value.toLowerCase()),void 0!==appendix)return[];if(void 0===value)return void 0!==option?core.from(option,["update","mode","eval"]):[];switch(option){case"mode":return core.from(value,["manual","automatic"]);case"eval":return core.from(value,["enabled","disabled"]);default:return[]}}}),core.fetch("https://raw.githubusercontent.com/grakkit/core/master/modules.json",response=>{const json=response.json();json&&(core.session.modules=json)}),core.event("org.bukkit.event.server.PluginDisableEvent",event=>{event.getPlugin()===core.plugin&&("automatic"===core.options.mode&&core.file(core.root,"index.js").remove(),Object.keys(core.session.data).forEach(path=>{const file=core.file(core.root,`data/${path}.json`);file.add(),file.write(JSON.stringify(core.serialize(core.session.data[path],!0)))}))}),[...core.file(core.root,"scripts").dir().listFiles()].filter(io=>!io.isDirectory()).forEach(io=>{try{core.parse(io)}catch(error){console.error(error.stack||error),console.error(`ScriptError: "${io.getPath().replace(/[\\]/g,"/")}" threw an error during evaluation!`)}})}();